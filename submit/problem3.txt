///////////////////////////////////////////////////////////////////////////////////////////////////////////////
Comparison:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
size of hP relation = 131
-this is an increase from the original output size of 100

First and foremeost  it differs from the original output in that no fields are specified or listed
for each Record (Male/Female) object.  This is obviously what we want as we want our analysis to 
be field insensitive.  More importantly the analysis lists that every object of type String can 
be assigned to any Record object (only has fields that are strings).  Again this is what we 
were looking for because in this case the fields do not matter that are assigned to the object,
therefore the object could possibly be assinged to all fields with the corresponding type.

hP(h1,h2) :- S(v1,_,v2), cvP(vc1,v1,h1), cvP(vc1,v2,h2). 
cvP(vc1,v2,h2) :- L(v1,_,v2), cvP(vc1,v1,h1), hP(h1,h2), vPfilter(v2,h2).

The above two lines are at the heart of what causes this loss of precisison.  cvP in this case
can be assigned to all of the contexts for any Record object.  In assigning this to 
hP, S(v1,f,v2) used to filter out of the contexts to make sure that the fields match but 
in field insensitive analysis any context where the field types match (vPfilter) are 
now potential objects that the Record object can point to on the heap.  

Below is an example of the description above:

[NOTE: Following is the convention I'm using: 
 joe => the variable that points to the string "joe"
 "joe" => the heap object that contains the string "joe"
 globalV => the variable that points to the global heap object
 globalH => the global heap object
]

Case 1: Field sensitive analysis
When the MaleRecord constructor is invoked to create joeRecord, this is what happens internally:
  (i) A temporary variable, say X, is assigned the value provided for the name field:
       X = globalH.joe // note that static strings are considered as fields of globalH
  (ii) newMaleRecordObj.name = X // newMaleRecordObj is the heap object that would be returned by the constructor and then assigned to joeRecord
  
Now, (i) is an instance of a load operation, ie, L(v1, f, v2) where v1 == globalV, f == joe, v2 == X
This load tuple when used in the cvP rule will result in the following tuple:  cvP(X, "joe")

Next, this newly generated cvP tuple, when used in the hP rule would generate the tuple (newMaleRecordObj, name, "joe")

 Case 2: Field insensitive analysis
In this case, we ignore the field parameter, f, in all the rules, including loads and stores.
Thus, if you apply the field-insensitive cvP rule in conjunction with (i) above, you would get multiple tuples of the following form (instead of just 1 as in the previous case):
   (X, "joe"), (X, "mary"), etc. 

And hence, these in would in turn introduce extraneous hP tuples when used in the field-insentive hP rule.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
Output:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
global(null) || AddressBook.java:37 Concrete: String @ 1
global(null) || AddressBook.java:38 Concrete: String @ 2
global(null) || AddressBook.java:39 Concrete: String @ 3
global(null) || AddressBook.java:41 Concrete: String @ 4
global(null) || AddressBook.java:42 Concrete: String @ 5
global(null) || AddressBook.java:44 Concrete: String @ 6
global(null) || AddressBook.java:45 Concrete: String @ 7
global(null) || AddressBook.java:47 Concrete: String @ 8
global(null) || AddressBook.java:48 Concrete: String @ 9
global(null) || AddressBook.java:61 Concrete: AddressBook @ 1
AddressBook.java:61 Concrete: AddressBook @ 1 || AddressBook.java:53 Concrete: LinkedList @ 3
AddressBook.java:63 Concrete: MaleRecord @ 6 || AddressBook.java:37 Concrete: String @ 1
AddressBook.java:63 Concrete: MaleRecord @ 6 || AddressBook.java:38 Concrete: String @ 2
AddressBook.java:63 Concrete: MaleRecord @ 6 || AddressBook.java:39 Concrete: String @ 3
AddressBook.java:63 Concrete: MaleRecord @ 6 || AddressBook.java:41 Concrete: String @ 4
AddressBook.java:63 Concrete: MaleRecord @ 6 || AddressBook.java:42 Concrete: String @ 5
AddressBook.java:63 Concrete: MaleRecord @ 6 || AddressBook.java:44 Concrete: String @ 6
AddressBook.java:63 Concrete: MaleRecord @ 6 || AddressBook.java:45 Concrete: String @ 7
AddressBook.java:63 Concrete: MaleRecord @ 6 || AddressBook.java:47 Concrete: String @ 8
AddressBook.java:63 Concrete: MaleRecord @ 6 || AddressBook.java:48 Concrete: String @ 9
AddressBook.java:64 Concrete: MaleRecord @ 13 || AddressBook.java:37 Concrete: String @ 1
AddressBook.java:66 Concrete: FemaleRecord @ 20 || AddressBook.java:37 Concrete: String @ 1
AddressBook.java:67 Concrete: FemaleRecord @ 27 || AddressBook.java:37 Concrete: String @ 1
AddressBook.java:69 Concrete: MaleRecord @ 34 || AddressBook.java:37 Concrete: String @ 1
AddressBook.java:64 Concrete: MaleRecord @ 13 || AddressBook.java:38 Concrete: String @ 2
AddressBook.java:64 Concrete: MaleRecord @ 13 || AddressBook.java:39 Concrete: String @ 3
AddressBook.java:66 Concrete: FemaleRecord @ 20 || AddressBook.java:38 Concrete: String @ 2
AddressBook.java:66 Concrete: FemaleRecord @ 20 || AddressBook.java:39 Concrete: String @ 3
AddressBook.java:67 Concrete: FemaleRecord @ 27 || AddressBook.java:38 Concrete: String @ 2
AddressBook.java:67 Concrete: FemaleRecord @ 27 || AddressBook.java:39 Concrete: String @ 3
AddressBook.java:69 Concrete: MaleRecord @ 34 || AddressBook.java:38 Concrete: String @ 2
AddressBook.java:69 Concrete: MaleRecord @ 34 || AddressBook.java:39 Concrete: String @ 3
AddressBook.java:64 Concrete: MaleRecord @ 13 || AddressBook.java:41 Concrete: String @ 4
AddressBook.java:64 Concrete: MaleRecord @ 13 || AddressBook.java:42 Concrete: String @ 5
AddressBook.java:64 Concrete: MaleRecord @ 13 || AddressBook.java:44 Concrete: String @ 6
AddressBook.java:64 Concrete: MaleRecord @ 13 || AddressBook.java:45 Concrete: String @ 7
AddressBook.java:66 Concrete: FemaleRecord @ 20 || AddressBook.java:41 Concrete: String @ 4
AddressBook.java:66 Concrete: FemaleRecord @ 20 || AddressBook.java:42 Concrete: String @ 5
AddressBook.java:66 Concrete: FemaleRecord @ 20 || AddressBook.java:44 Concrete: String @ 6
AddressBook.java:66 Concrete: FemaleRecord @ 20 || AddressBook.java:45 Concrete: String @ 7
AddressBook.java:67 Concrete: FemaleRecord @ 27 || AddressBook.java:41 Concrete: String @ 4
AddressBook.java:67 Concrete: FemaleRecord @ 27 || AddressBook.java:42 Concrete: String @ 5
AddressBook.java:67 Concrete: FemaleRecord @ 27 || AddressBook.java:44 Concrete: String @ 6
AddressBook.java:67 Concrete: FemaleRecord @ 27 || AddressBook.java:45 Concrete: String @ 7
AddressBook.java:69 Concrete: MaleRecord @ 34 || AddressBook.java:41 Concrete: String @ 4
AddressBook.java:69 Concrete: MaleRecord @ 34 || AddressBook.java:42 Concrete: String @ 5
AddressBook.java:69 Concrete: MaleRecord @ 34 || AddressBook.java:44 Concrete: String @ 6
AddressBook.java:69 Concrete: MaleRecord @ 34 || AddressBook.java:45 Concrete: String @ 7
AddressBook.java:64 Concrete: MaleRecord @ 13 || AddressBook.java:47 Concrete: String @ 8
AddressBook.java:64 Concrete: MaleRecord @ 13 || AddressBook.java:48 Concrete: String @ 9
AddressBook.java:66 Concrete: FemaleRecord @ 20 || AddressBook.java:47 Concrete: String @ 8
AddressBook.java:66 Concrete: FemaleRecord @ 20 || AddressBook.java:48 Concrete: String @ 9
AddressBook.java:67 Concrete: FemaleRecord @ 27 || AddressBook.java:47 Concrete: String @ 8
AddressBook.java:67 Concrete: FemaleRecord @ 27 || AddressBook.java:48 Concrete: String @ 9
AddressBook.java:69 Concrete: MaleRecord @ 34 || AddressBook.java:47 Concrete: String @ 8
AddressBook.java:69 Concrete: MaleRecord @ 34 || AddressBook.java:48 Concrete: String @ 9
AddressBook.java:53 Concrete: LinkedList @ 3 || LinkedList.java:95 Concrete: LinkedList$Entry @ 3
LinkedList.java:795 Concrete: LinkedList$Entry @ 1 || AddressBook.java:63 Concrete: MaleRecord @ 6
LinkedList.java:795 Concrete: LinkedList$Entry @ 1 || AddressBook.java:66 Concrete: FemaleRecord @ 20
LinkedList.java:795 Concrete: LinkedList$Entry @ 1 || AddressBook.java:67 Concrete: FemaleRecord @ 27
LinkedList.java:795 Concrete: LinkedList$Entry @ 1 || AddressBook.java:69 Concrete: MaleRecord @ 34
